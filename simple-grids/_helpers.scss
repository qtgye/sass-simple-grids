@function is-plain-number($value) {
  @return if( not (type-of($value) == 'number') or not (unitless($value)), false, true );
}

@function svg-breakpoint-grid($colors: false, $columns: false) {

  $columns: if($columns, $columns, get-setting('columns'));
  // Grid parsing & normalizing
  // $grid: susy-compile($grid, $context-only: true);

  // Color and gradient handling
  $gradient: '';

  $colors: if($colors, $colors, hsla(120, 50%, 50%, 0.5) hsla(120, 50%, 75%, 0.5));

  @if length($colors) > 1 {
    $gradient: svg-gradient($colors);
    $colors: 'url(%23susy-svg-gradient)';
  } @else {
    $colors: svg-color($colors);
  }

  // Get a default image-width
  // $span: (
  //   'span': map-get($grid, 'columns'),
  //   'spread': map-get($grid, 'container-spread'),
  // );
  // $span: map-merge($grid, $span);
  // $image-width: su-call('su-span', $span);
  // $image-width: if((type-of($image-width) == 'number'), $image-width, 100%);
  $image-width: 100%;

  // SVG construction
  // $columns: map-get($grid, 'columns');
  // $offset: $offset or _susy-svg-offset($grid);

  $attrs: 'fill="#{$colors}" width="#{$image-width}"';
  $svg: 'data:image/svg+xml,';
  $svg: $svg + '%3Csvg xmlns="http://www.w3.org/2000/svg" #{$attrs} %3E';
  $svg: $svg + $gradient;

  @for $column from 1 through $columns {
    $width: span(1);
    $x: svg-column-position($column);
    $svg: $svg + svg-rect($x, $width);
  }

  @return url('#{$svg}%3C/svg%3E');
}


@function svg-gradient(
  $colors
) {
  $gradient: '%3Cdefs%3E%3ClinearGradient spreadMethod="pad"';
  $gradient: '#{$gradient} id="susy-svg-gradient"';
  $gradient: '#{$gradient} x1="0%" y1="0%" x2="100%" y2="0%"%3E';

  @for $i from 1 through length($colors) {
    $color: svg-color(nth($colors, $i));
    $offset: percentage(($i - 1) / (length($colors) - 1));
    $stop: '%3Cstop offset="#{$offset}" style="stop-color:#{$color};" /%3E';

    $gradient: $gradient + $stop;
  }

  @return $gradient + '%3C/linearGradient%3E%3C/defs%3E';
}

@function svg-color(
  $color
) {
  $color: inspect($color); // convert to string

  @if (str-index($color, '#') == 1) {
    $color: '%23' + str-slice($color, 2);
  }

  @return $color;
}

@function svg-column-position($position: 1) {
  @if $position == 1 {
    @return 0;
  }
  @return span(($position - 1) wide);
}


@function svg-rect($x, $width, $offset: 0) {

  @if (type-of($offset) == 'number') and (type-of($x) == 'number') {
    @if comparable($x, $offset) {
      $x: $x + $offset;
    } @else {
      $x: 'calc(#{$x} + #{$offset})';
    }
  } @else if $offset and ($x != 0) {
    $x: 'calc(#{$x} + #{$offset})';
  } @else if $offset {
    $x: $offset;
  }

  @return '%3Crect x="#{$x}" width="#{$width}" height="100%"/%3E';
}